[debug] > Exec(;reload; set _root_.org.jetbrains.sbt.StructureKeys.sbtStructureOptions in Global := "download resolveClassifiers resolveSbtClassifiers" ;*/*:dumpStructureTo C:/Users/vishn/AppData/Local/Temp/sbt-structure.xml; session clear-all ; set ideaPort in Global := 60489, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.2 (Oracle Corporation Java 15.0.1)
[debug]       Load.loadUnit: plugins took 15.2591ms
[debug]       Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\vishn\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishn\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0338 ms
[debug]           Load.resolveProject(global-plugins) took 0.8126ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\vishn\.sbt\1.0\plugins, plugins: List(<none>))) took 2.1919ms
[debug] [Loading] Done in C:\Users\vishn\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 3.1138ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.0211ms
[debug]     Load.loadUnit(file:/C:/Users/vishn/.sbt/1.0/plugins/, ...) took 19.1589ms
[debug]   Load.apply: load took 20.0641ms
[debug]   Load.apply: resolveProjects took 0.0832ms
[debug]   Load.apply: finalTransforms took 4.5796ms
[debug]   Load.apply: config.delegates took 0.232ms
[debug]   Load.apply: Def.make(settings)... took 31.3049ms
[debug]   Load.apply: structureIndex took 10.9863ms
[debug]   Load.apply: mkStreams took 0.0031ms
[info] loading global plugins from C:\Users\vishn\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 247.3534ms
[debug]           Load.loadUnit: plugins took 16.9766ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter\project
[debug]             Load.loadUnit: mkEval took 0.2634ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0086 ms
[info] loading settings for project spark-file-splitter-build from idea.sbt ...
[debug]               Load.resolveProject(spark-file-splitter-build) took 1.0518ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-file-splitter-build, base: C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter\project, plugins: List(<none>))) took 2.3869ms
[debug] [Loading] Done in C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter\project, returning: (spark-file-splitter-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 15.4788ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.6189ms
[debug]         Load.loadUnit(file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/project/, ...) took 35.7745ms
[debug]       Load.apply: load took 36.7888ms
[debug]       Load.apply: resolveProjects took 0.0809ms
[debug]       Load.apply: finalTransforms took 4.5813ms
[debug]       Load.apply: config.delegates took 0.1807ms
[debug]       Load.apply: Def.make(settings)... took 63.9159ms
[debug]       Load.apply: structureIndex took 19.6096ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 289.892ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter
[debug]       Load.loadUnit: mkEval took 0.3121ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5233 ms
[info] loading settings for project spark-file-splitter from build.sbt ...
[debug]         Load.resolveProject(spark-file-splitter) took 37.5077ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark-file-splitter, base: C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter, plugins: List(<none>))) took 39.6221ms
[debug] [Loading] Done in C:\Users\vishn\OneDrive\Documents\Projects\spark-file-splitter, returning: (spark-file-splitter)
[debug]     Load.loadUnit: loadedProjectsRaw took 113.1872ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.6241ms
[debug]   Load.loadUnit(file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/, ...) took 418.4166ms
[debug] Load.apply: load took 419.6784ms
[debug] Load.apply: resolveProjects took 0.0885ms
[debug] Load.apply: finalTransforms took 13.1565ms
[debug] Load.apply: config.delegates took 0.1778ms
[debug] Load.apply: Def.make(settings)... took 45.5866ms
[debug] Load.apply: structureIndex took 15.7676ms
[debug] Load.apply: mkStreams took 0.0051ms
[warn] Discarding 1 session setting.  Use 'session save' to persist session settings.
[info] set current project to spark-file-splitter (in build file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(set _root_.org.jetbrains.sbt.StructureKeys.sbtStructureOptions in Global := "download resolveClassifiers resolveSbtClassifiers", None, None)
[info] Defining Global / sbtStructureOptions
[info] The new value will be used by Global / ssOptions
[debug] Defining 
[debug] 	Global / sbtStructureOptions
[debug] 
[debug] The new value will be used by 
[debug] 	Global / ssOptions
[info] Reapplying settings...
[info] set current project to spark-file-splitter (in build file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/)
[debug] > Exec(*/*:dumpStructureTo C:/Users/vishn/AppData/Local/Temp/sbt-structure.xml, None, None)
[debug] Evaluating tasks: Global / dumpStructureTo
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] Writing structure to C:\Users\vishn\AppData\Local\Temp\sbt-structure.xml...
[info] Done.
[success] Total time: 4 s, completed 25 Nov 2020, 20:15:13
[debug] > Exec(session clear-all, None, None)
[info] Reapplying settings...
[info] set current project to spark-file-splitter (in build file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/)
[debug] > Exec(set ideaPort in Global := 60489, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-file-splitter (in build file:/C:/Users/vishn/OneDrive/Documents/Projects/spark-file-splitter/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
